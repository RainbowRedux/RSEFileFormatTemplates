//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: ANM.bt
//   Authors: Alexander Evdokimov
//   Version: 0.1
//   Purpose: Ghost Recon ANM files
// File Mask: *.anm
//
//   History: 
//
//------------------------------------------------

typedef struct { 
  UINT Length;  
  char Text[Length];
} CSTRING; 

typedef struct {
  UINT SectionSize;
  UINT ID;
  struct {    
    CSTRING Name <name="Version">; 
    UINT Value;
  } VERSION;    
  CSTRING Name <name="Name">; 
} SECTION_HEADER <name="Header">;

typedef struct {     
  FLOAT x;
  FLOAT y;
  FLOAT z;
} VECTOR3; 

typedef struct {     
  FLOAT x;
  FLOAT y;
  FLOAT z;
  FLOAT w;  
} VECTOR4; 

//--------------------
// File header
// --------------------

struct {
  CSTRING Name <name="BeginModel token">; 
  FLOAT Version <name="Version">;
  time_t ModifiedDate <name="File Modified Date">;
} HEADER <name="File header">;

UINT Count;

typedef  struct {
  SECTION_HEADER Header;
  struct {
    UINT Position_OutOfRangeType; // 1 - cycle, 3 - ping-pong
    UINT Rotation_OutOfRangeType; // 1 - cycle, 3 - ping-pong
    UINT Unknown; // 0
    UINT16 Unknown; // 0
    UINT16 Unknown; // 65535
    UINT16 Unknown; // 32639
    UINT16 Unknown; // 128
    FLOAT TicksinSecond; // 4800 
    UINT Unknown; // 0 
    BYTE Unknown; // 1
    BYTE Unknown; // 1
    UBYTE Unknown; // ?    
  } PROPERTIES;

  UINT Count<name="Number of position keys">;    
  typedef struct 
  {
    UINT ControllerType; // 3 - Linear Position, 5 - TCB Position
    if (ControllerType == 3) 
    {
      FLOAT Unknown; // 0
      FLOAT Time;
      VECTOR3 Position;  
    }
    else 
    {
      FLOAT Unknown; // 0
      FLOAT Time;
      VECTOR3 Position; 
      FLOAT Tension;  
      FLOAT Contunioty;
      FLOAT Bias;         
    };  
  } POSITION_KEY;       
  typedef struct (int arraySize) {
    POSITION_KEY array[arraySize] <optimize=false>;
  } POSITION_KEYS;     
  POSITION_KEYS PositionKeys(Count);
    
  UINT Count <name="Number of rotation keys">;
  typedef struct {
    UINT ControllerType; // 4 - Linear Rotation
    if (ControllerType == 4) 
    {
      UINT Unknown; // 0
      FLOAT Time;
      UINT Unknown;        
      UINT Unknown;
      UINT Unknown; 
      VECTOR4 Rotation;
    }
  } ROTATION_KEY;    
  typedef struct (int arraySize) {
    ROTATION_KEY array[arraySize] <optimize=false>;
  } ROTATION_KEYS;     
  ROTATION_KEYS RotationKey(Count);
} ANIMATION <name=ObjectName>;

string ObjectName (ANIMATION &animation) {
  return "Object name: " + animation.Header.Name.Text;
}; 
typedef struct (int arraySize) {
  ANIMATION array[arraySize] <optimize=false>;
} ANIMATIONS;  
ANIMATIONS Animations(Count) <name="Animations">; 

CSTRING Name <name="EndANM token">;
